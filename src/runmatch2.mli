(* module CharMap : *)
(*   sig *)
(*     type key = Simple_parser.edge *)
(*     type +'a t *)
(*     val empty : 'a t *)
(*     val is_empty : 'a t -> bool *)
(*     val mem : key -> 'a t -> bool *)
(*     val add : key -> 'a -> 'a t -> 'a t *)
(*     val singleton : key -> 'a -> 'a t *)
(*     val remove : key -> 'a t -> 'a t *)
(*     val merge : *)
(*       (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t *)
(*     val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int *)
(*     val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool *)
(*     val iter : (key -> 'a -> unit) -> 'a t -> unit *)
(*     val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b *)
(*     val for_all : (key -> 'a -> bool) -> 'a t -> bool *)
(*     val exists : (key -> 'a -> bool) -> 'a t -> bool *)
(*     val filter : (key -> 'a -> bool) -> 'a t -> 'a t *)
(*     val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t *)
(*     val cardinal : 'a t -> int *)
(*     val bindings : 'a t -> (key * 'a) list *)
(*     val min_binding : 'a t -> key * 'a *)
(*     val max_binding : 'a t -> key * 'a *)
(*     val choose : 'a t -> key * 'a *)
(*     val split : key -> 'a t -> 'a t * 'a option * 'a t *)
(*     val find : key -> 'a t -> 'a *)
(*     val map : ('a -> 'b) -> 'a t -> 'b t *)
(*     val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t *)
(*   end *)
(* module ChLMap : *)
(*   sig *)
(*     type 'a t = 'a CharMap.t *)
(*     val add : CharMap.key -> 'a -> 'a list CharMap.t -> 'a list CharMap.t *)
(*     val empty : 'a CharMap.t *)
(*     val mem : CharMap.key -> 'a CharMap.t -> bool *)
(*     val find : CharMap.key -> 'a CharMap.t -> 'a *)
(*   end *)
(* type acc = Yes | No *)
(* type nfaNode = NfaNode of nfaNode ref list ChLMap.t * acc | Unused *)
(* val string_to_list : string -> char list *)
val run : string -> Simple_parser.node -> bool
(* val fff : string -> Simple_parser.node (\*  *\) *)
